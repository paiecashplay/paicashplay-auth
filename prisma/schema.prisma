generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String    @map("password_hash")
  userType     UserType  @map("user_type")
  isVerified   Boolean   @default(false) @map("is_verified")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  profile            UserProfile?
  sessions           UserSession[]
  emailVerifications EmailVerification[]
  passwordResets     PasswordReset[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  phone     String?
  country   String?
  language  String   @default("fr")
  avatarUrl String?  @map("avatar_url")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model OAuthClient {
  id            String   @id @default(cuid())
  clientId      String   @unique @map("client_id")
  clientSecret  String   @map("client_secret")
  name          String
  description   String?
  redirectUris  Json     @map("redirect_uris")
  allowedScopes Json     @map("allowed_scopes")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("oauth_clients")
}

model AdminUser {
  id           String    @id @default(cuid())
  username     String    @unique
  passwordHash String    @map("password_hash")
  email        String
  fullName     String    @map("full_name")
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  logs          AdminLog[]
  configUpdates SystemConfig[]

  @@map("admin_users")
}

model SystemConfig {
  id          String     @id @default(cuid())
  configKey   String     @unique @map("config_key")
  configValue String?    @map("config_value")
  configType  ConfigType @default(STRING) @map("config_type")
  description String?
  isEncrypted Boolean    @default(false) @map("is_encrypted")
  updatedBy   String?    @map("updated_by")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  updatedByAdmin AdminUser? @relation(fields: [updatedBy], references: [id])

  @@map("system_configs")
}

model AdminLog {
  id           String   @id @default(cuid())
  adminId      String   @map("admin_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   String?  @map("resource_id")
  details      Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  admin AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}

enum UserType {
  DONOR      @map("donor")
  FEDERATION @map("federation")
  CLUB       @map("club")
  PLAYER     @map("player")
}

enum ConfigType {
  STRING  @map("string")
  NUMBER  @map("number")
  BOOLEAN @map("boolean")
  JSON    @map("json")
}