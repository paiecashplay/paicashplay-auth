generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  passwordHash       String              @map("password_hash")
  userType           UserType            @map("user_type")
  isVerified         Boolean             @default(false) @map("is_verified")
  isActive           Boolean             @default(true) @map("is_active")
  loginAttempts      Int                 @default(0) @map("login_attempts")
  lockedUntil        DateTime?           @map("locked_until")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  profile            UserProfile?
  sessions           UserSession[]
  emailVerifications EmailVerification[]
  passwordResets     PasswordReset[]
  socialAccounts     SocialAccount[]
  authorizationCodes AuthorizationCode[]
  accessTokens       AccessToken[]
  auditLogs          AuditLog[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  phone     String?
  country   String?
  language  String   @default("fr")
  avatarUrl String?  @map("avatar_url")
  height    Float?   @map("height_cm")
  weight    Float?   @map("weight_kg")
  isPartner Boolean  @default(false) @map("is_partner")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token") @db.VarChar(512)
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique @db.VarChar(512)
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique @db.VarChar(512)
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model OAuthClient {
  id                 String              @id @default(cuid())
  clientId           String              @unique @map("client_id")
  clientSecret       String              @map("client_secret")
  name               String
  description        String?
  redirectUris       Json                @map("redirect_uris")
  allowedScopes      Json                @map("allowed_scopes")
  isActive           Boolean             @default(true) @map("is_active")
  createdAt          DateTime            @default(now()) @map("created_at")
  authorizationCodes AuthorizationCode[]
  accessTokens       AccessToken[]
  oauthSessions      OAuthSession[]

  @@map("oauth_clients")
}

model OAuthSession {
  id           String      @id @default(cuid())
  clientId     String      @map("client_id")
  redirectUri  String      @map("redirect_uri")
  responseType String      @map("response_type")
  scope        String?
  state        String?
  expiresAt    DateTime    @map("expires_at")
  createdAt    DateTime    @default(now()) @map("created_at")
  client       OAuthClient @relation(fields: [clientId], references: [clientId], onDelete: Cascade)

  @@map("oauth_sessions")
}

model AuthorizationCode {
  id                  String      @id @default(cuid())
  code                String      @unique @db.VarChar(512)
  clientId            String      @map("client_id")
  userId              String      @map("user_id")
  redirectUri         String      @map("redirect_uri")
  scope               String?
  codeChallenge       String?     @map("code_challenge")
  codeChallengeMethod String?     @map("code_challenge_method")
  expiresAt           DateTime    @map("expires_at")
  used                Boolean     @default(false)
  createdAt           DateTime    @default(now()) @map("created_at")
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  client              OAuthClient @relation(fields: [clientId], references: [clientId], onDelete: Cascade)

  @@map("authorization_codes")
}

model AccessToken {
  id            String         @id @default(cuid())
  tokenHash     String         @unique @map("token_hash") @db.VarChar(512)
  clientId      String         @map("client_id")
  userId        String         @map("user_id")
  scope         String?
  expiresAt     DateTime       @map("expires_at")
  revoked       Boolean        @default(false)
  createdAt     DateTime       @default(now()) @map("created_at")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  client        OAuthClient    @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  refreshTokens RefreshToken[]

  @@map("access_tokens")
}

model RefreshToken {
  id            String      @id @default(cuid())
  tokenHash     String      @unique @map("token_hash") @db.VarChar(512)
  accessTokenId String      @map("access_token_id")
  expiresAt     DateTime    @map("expires_at")
  revoked       Boolean     @default(false)
  createdAt     DateTime    @default(now()) @map("created_at")
  accessToken   AccessToken @relation(fields: [accessTokenId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model AdminUser {
  id            String         @id @default(cuid())
  username      String         @unique
  passwordHash  String         @map("password_hash")
  email         String
  fullName      String         @map("full_name")
  role          AdminRole      @default(ADMIN)
  services      Json?          @map("allowed_services")
  isActive      Boolean        @default(true) @map("is_active")
  lastLogin     DateTime?      @map("last_login")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  logs          AdminLog[]
  configUpdates SystemConfig[]
  auditLogs     AuditLog[]

  @@map("admin_users")
}

model SystemConfig {
  id             String     @id @default(cuid())
  configKey      String     @unique @map("config_key")
  configValue    String?    @map("config_value")
  configType     ConfigType @default(STRING) @map("config_type")
  description    String?
  isEncrypted    Boolean    @default(false) @map("is_encrypted")
  updatedBy      String?    @map("updated_by")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  updatedByAdmin AdminUser? @relation(fields: [updatedBy], references: [id])

  @@map("system_configs")
}

model AuditLog {
  id           String     @id @default(cuid())
  userId       String?    @map("user_id")
  adminId      String?    @map("admin_id")
  action       String
  resourceType String     @map("resource_type")
  resourceId   String?    @map("resource_id")
  oldValues    Json?      @map("old_values")
  newValues    Json?      @map("new_values")
  ipAddress    String?    @map("ip_address")
  userAgent    String?    @map("user_agent")
  createdAt    DateTime   @default(now()) @map("created_at")
  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  admin        AdminUser? @relation(fields: [adminId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model RateLimitLog {
  id        String   @id @default(cuid())
  key       String   @unique @db.VarChar(512)
  count     Int      @default(1)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("rate_limit_logs")
}

model AdminLog {
  id           String    @id @default(cuid())
  adminId      String    @map("admin_id")
  action       String
  resourceType String    @map("resource_type")
  resourceId   String?   @map("resource_id")
  details      Json?
  ipAddress    String?   @map("ip_address")
  userAgent    String?   @map("user_agent")
  createdAt    DateTime  @default(now()) @map("created_at")
  admin        AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}

model IdentityProvider {
  id             String          @id @default(cuid())
  name           String          @unique
  displayName    String          @map("display_name")
  type           ProviderType
  clientId       String          @map("client_id")
  clientSecret   String          @map("client_secret")
  isEnabled      Boolean         @default(true) @map("is_enabled")
  config         Json?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  socialAccounts SocialAccount[]

  @@map("identity_providers")
}

model SocialAccount {
  id             String           @id @default(cuid())
  userId         String           @map("user_id")
  providerId     String           @map("provider_id")
  providerUserId String           @map("provider_user_id") @db.VarChar(50)
  email          String?
  name           String?
  avatar         String?
  accessToken    String?          @map("access_token") @db.Text
  refreshToken   String?          @map("refresh_token") @db.Text
  expiresAt      DateTime?        @map("expires_at")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider       IdentityProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerUserId])
  @@map("social_accounts")
}

enum UserType {
  donor
  federation
  club
  player
  company
  affiliate
  academy
  school
  association
}

enum ConfigType {
  STRING  @map("string")
  NUMBER  @map("number")
  BOOLEAN @map("boolean")
  JSON    @map("json")
}

enum ProviderType {
  google
  facebook
  linkedin
  github
  microsoft
}

enum AdminRole {
  SUPER_ADMIN  @map("super_admin")
  ADMIN        @map("admin")
  SERVICE_ADMIN @map("service_admin")
}
