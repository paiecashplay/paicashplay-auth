const { EmailService } = require('../src/lib/email-service');

async function testEmailConfiguration() {
  console.log('üìß Test de la configuration email...\n');

  try {
    // 1. Tester la connexion SMTP
    console.log('1. Test de la connexion SMTP...');
    const smtpTest = await EmailService.testSmtpConnection();
    
    if (smtpTest.success) {
      console.log('‚úÖ Connexion SMTP r√©ussie');
    } else {
      console.log('‚ùå √âchec de la connexion SMTP:', smtpTest.message);
      if (smtpTest.code) {
        console.log('   Code d\'erreur:', smtpTest.code);
      }
      
      console.log('\nüìã V√©rifiez votre configuration dans .env.development :');
      console.log('   SMTP_HOST=smtp.gmail.com');
      console.log('   SMTP_PORT=587');
      console.log('   SMTP_USER=your-email@gmail.com');
      console.log('   SMTP_PASSWORD=your-app-password');
      console.log('   FROM_EMAIL=noreply@paiecashplay.com');
      console.log('   FROM_NAME=PaieCashPlay Fondation');
      
      return;
    }

    // 2. Tester l'envoi d'un email de reset (simulation)
    console.log('\n2. Test de g√©n√©ration d\'email de reset...');
    
    try {
      // Ne pas envoyer r√©ellement, juste tester la g√©n√©ration
      const resetUrl = 'http://localhost:3000/reset-password?token=test123&oauth_session=oauth456';
      
      // Simuler la g√©n√©ration du template
      const { EmailTemplateService } = require('../src/lib/email-templates');
      const emailHtml = await EmailTemplateService.getPasswordResetEmail({
        firstName: 'Test',
        resetUrl: resetUrl
      });
      
      console.log('‚úÖ Template d\'email g√©n√©r√© avec succ√®s');
      console.log('   Longueur du HTML:', emailHtml.length, 'caract√®res');
      
      // V√©rifier que les variables sont remplac√©es
      if (emailHtml.includes('{{firstName}}') || emailHtml.includes('{{resetUrl}}')) {
        console.log('‚ö†Ô∏è  Attention: Des variables ne sont pas remplac√©es dans le template');
      } else {
        console.log('‚úÖ Variables correctement remplac√©es dans le template');
      }
      
    } catch (templateError) {
      console.log('‚ùå Erreur de g√©n√©ration du template:', templateError.message);
    }

    console.log('\nüéâ Configuration email valid√©e !');
    console.log('\nüìã Pour tester l\'envoi r√©el d\'emails :');
    console.log('   1. Configurez vos vraies credentials SMTP dans .env.development');
    console.log('   2. Utilisez l\'interface web pour demander un reset de mot de passe');
    console.log('   3. V√©rifiez votre bo√Æte mail (et les spams)');

  } catch (error) {
    console.error('\n‚ùå ERREUR:', error.message);
    console.error(error.stack);
  }
}

// Ex√©cuter le test
testEmailConfiguration();