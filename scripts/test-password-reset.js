const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function testPasswordResetCycle() {
  console.log('üîÑ Test du cycle de r√©cup√©ration de mot de passe...\n');

  try {
    // 1. Cr√©er un utilisateur de test
    console.log('1. Cr√©ation d\'un utilisateur de test...');
    
    // Supprimer l'utilisateur s'il existe d√©j√†
    await prisma.user.deleteMany({
      where: { email: 'test-reset@example.com' }
    });

    const hashedPassword = await bcrypt.hash('oldpassword123', 12);
    
    const testUser = await prisma.user.create({
      data: {
        email: 'test-reset@example.com',
        passwordHash: hashedPassword,
        emailVerified: true,
        profile: {
          create: {
            firstName: 'Test',
            lastName: 'User',
            userType: 'donor'
          }
        }
      },
      include: { profile: true }
    });
    
    console.log('‚úÖ Utilisateur cr√©√©:', testUser.email);

    // 2. Tester l'endpoint forgot-password
    console.log('\n2. Test de l\'endpoint forgot-password...');
    
    const forgotResponse = await fetch('http://localhost:3000/api/auth/forgot-password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: 'test-reset@example.com' })
    });
    
    const forgotData = await forgotResponse.json();
    console.log('R√©ponse forgot-password:', forgotData);
    
    if (!forgotResponse.ok) {
      throw new Error('√âchec de l\'endpoint forgot-password');
    }
    
    // 3. R√©cup√©rer le token de reset depuis la base
    console.log('\n3. R√©cup√©ration du token de reset...');
    
    const resetToken = await prisma.passwordReset.findFirst({
      where: { userId: testUser.id },
      orderBy: { createdAt: 'desc' }
    });
    
    if (!resetToken) {
      throw new Error('Token de reset non trouv√©');
    }
    
    console.log('‚úÖ Token de reset trouv√©:', resetToken.token.substring(0, 10) + '...');

    // 4. Tester la validation du token
    console.log('\n4. Test de validation du token...');
    
    const validateResponse = await fetch('http://localhost:3000/api/auth/validate-reset-token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token: resetToken.token })
    });
    
    const validateData = await validateResponse.json();
    console.log('R√©ponse validation:', validateData);
    
    if (!validateResponse.ok) {
      throw new Error('√âchec de la validation du token');
    }

    // 5. Tester le reset du mot de passe
    console.log('\n5. Test du reset de mot de passe...');
    
    const resetResponse = await fetch('http://localhost:3000/api/auth/reset-password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        token: resetToken.token, 
        password: 'newpassword123' 
      })
    });
    
    const resetData = await resetResponse.json();
    console.log('R√©ponse reset:', resetData);
    
    if (!resetResponse.ok) {
      throw new Error('√âchec du reset de mot de passe');
    }

    // 6. V√©rifier que le mot de passe a √©t√© chang√©
    console.log('\n6. V√©rification du changement de mot de passe...');
    
    const updatedUser = await prisma.user.findUnique({
      where: { id: testUser.id }
    });
    
    const passwordValid = await bcrypt.compare('newpassword123', updatedUser.passwordHash);
    
    if (!passwordValid) {
      throw new Error('Le mot de passe n\'a pas √©t√© mis √† jour');
    }
    
    console.log('‚úÖ Mot de passe mis √† jour avec succ√®s');

    // 7. V√©rifier que le token a √©t√© marqu√© comme utilis√©
    console.log('\n7. V√©rification du statut du token...');
    
    const usedToken = await prisma.passwordReset.findUnique({
      where: { id: resetToken.id }
    });
    
    if (!usedToken.used) {
      throw new Error('Le token n\'a pas √©t√© marqu√© comme utilis√©');
    }
    
    console.log('‚úÖ Token marqu√© comme utilis√©');

    // 8. Tester qu'on ne peut pas r√©utiliser le token
    console.log('\n8. Test de r√©utilisation du token...');
    
    const reuseResponse = await fetch('http://localhost:3000/api/auth/reset-password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        token: resetToken.token, 
        password: 'anothernewpassword123' 
      })
    });
    
    if (reuseResponse.ok) {
      throw new Error('Le token usag√© a pu √™tre r√©utilis√© (probl√®me de s√©curit√©)');
    }
    
    console.log('‚úÖ Token usag√© correctement rejet√©');

    // 9. Nettoyer
    console.log('\n9. Nettoyage...');
    await prisma.user.delete({ where: { id: testUser.id } });
    console.log('‚úÖ Utilisateur de test supprim√©');

    console.log('\nüéâ TOUS LES TESTS SONT PASS√âS !');
    console.log('\nüìã R√©sum√© du cycle de r√©cup√©ration de mot de passe :');
    console.log('   ‚úÖ Demande de reset (forgot-password)');
    console.log('   ‚úÖ G√©n√©ration et stockage du token');
    console.log('   ‚úÖ Validation du token');
    console.log('   ‚úÖ Reset du mot de passe');
    console.log('   ‚úÖ Marquage du token comme utilis√©');
    console.log('   ‚úÖ Protection contre la r√©utilisation');

  } catch (error) {
    console.error('\n‚ùå ERREUR:', error.message);
    console.error(error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test
testPasswordResetCycle();